/*
 * Lunch RouletteAPI
 *
 * A slack API to generate random lunch locations using fluentMigrator.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using IO.Swagger.Models;
using LunchRoletteApi.Repositories;
using LunchRoletteApi.Models;
namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class LocationApiController : Controller
    {
        private static string Help = "Lunch Bot\n/Lunch -where  : return location\n/Lunch -add -n {Name} -d {Description}\n/Lunch -up     : Vote up location\n/Lunch -down   : Vote down location\n/Lunch -list   : show all locations";
        /// <summary>
        /// Locations of places to eat
        /// </summary>
        /// <remarks>Location of places to eat. </remarks>
        /// <response code="200">An array of locations</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/Location")]
        [ProducesResponseType(typeof(List<Location>), 200)]
        public virtual IActionResult LocationGet()
        {
            return LunchList();
        }
        
        private IActionResult LunchList()
        {
            var lr = new LocationRepository();
            var result = new SlackResult();
            result.attachments = lr.GetLocations().Select(r =>
            {
                return new SlackAttachment() { text = $"{r.DisplayName} - {r.Description}" };
            }).ToList();
            return Json(result);
        }
        /// <summary>
        /// Random Lunch Location
        /// </summary>
        ///  /// <remarks>A random lunch location. </remarks>
        /// <response code="200">One location</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/Lunch")]
        [ProducesResponseType(typeof(string), 200)]
        public virtual IActionResult LunchGet(string channel_name = null, string text = null)
        {
            var parameters = Parameter.ParseParameters(text);
            if(parameters.Count > 0)
            {
                switch (parameters[0].Name.ToLower())
                {
                    case "add":
                        return LunchAdd(parameters);
                        break;
                    case "where":
                        return RandomLunch();
                        break;
                    case "list":
                        return LunchList();
                        break;
                }
            }
            return Json(new SlackResult() { text = Help });
        }


        private IActionResult LunchAdd(List<Parameter> parameters)
        {
            string name = parameters.FindParameter("n").Value;
            string description = parameters.FindParameter("d").Value;
            var lr = new LocationRepository();
            lr.AddLunch(name, description);
            return Json(new SlackResult() { text = "Great!" });
        }
        private IActionResult RandomLunch()
        {
            var lr = new LocationRepository();
            return Json(new SlackResult() { text = lr.GetLunch().DisplayName });
        }

    }
}
